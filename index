<!doctype html>
<html lang="ar" dir="rtl">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Cashier System</title>

  <!-- Google Font: Poppins -->
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap" rel="stylesheet">

  <style>
    :root{
      --bg:#0f1724; /* dark background */
      --card:#0b1220;
      --muted:#94a3b8;
      --text:#e6eef8;
      --accent:#06b6d4;
      --glass: rgba(255,255,255,0.03);
      --success: #16a34a;
      --danger:#ef4444;

      --light-bg:#f6f8fb;
      --light-card:#ffffff;
      --light-text:#0b1220;
      --light-muted:#475569;
      --light-accent:#0ea5a4;
    }

    /* layout */
    html,body{height:100%; margin:0; font-family:'Poppins',sans-serif; -webkit-font-smoothing:antialiased; -moz-osx-font-smoothing:grayscale;}
    body{background:var(--bg); color:var(--text); display:flex; align-items:flex-start; justify-content:center; padding:20px;}
    .wrap{max-width:1100px; width:100%; display:grid; grid-template-columns: 380px 1fr; gap:18px; align-items:start;}

    /* header card */
    .header {
      grid-column: 1/-1;
      display:flex; align-items:center; justify-content:space-between;
      background:linear-gradient(180deg, rgba(255,255,255,0.02), rgba(255,255,255,0.01));
      border-radius:12px; padding:14px 18px; box-shadow: 0 6px 18px rgba(2,6,23,0.6);
      gap:12px;
    }
    .title {
      display:flex; align-items:center; gap:12px;
    }
    .logo {
      width:48px; height:48px; border-radius:10px; background:linear-gradient(135deg,var(--accent),#7c3aed);
      display:flex; align-items:center; justify-content:center; font-weight:700; color:white; font-size:18px;
      box-shadow: 0 6px 20px rgba(12,18,28,0.6);
    }
    h1{margin:0; font-size:18px; letter-spacing:0.2px;}
    .subtitle{font-size:12px; color:var(--muted); margin-top:2px;}

    .controls {display:flex; gap:10px; align-items:center;}
    .btn {
      background:var(--glass); border:1px solid rgba(255,255,255,0.04); color:var(--text); padding:8px 12px; border-radius:10px;
      cursor:pointer; font-weight:600; font-size:13px;
    }
    .btn.primary { background: linear-gradient(90deg,var(--accent),#7c3aed); color:white; border:none; box-shadow: 0 8px 20px rgba(7,89,95,0.12); }
    .btn.warn { background:transparent; border:1px solid rgba(255,80,80,0.12); color:var(--danger); }

    /* left panel (items & current state) */
    .panel {
      background: linear-gradient(180deg, rgba(255,255,255,0.02), rgba(255,255,255,0.01));
      border-radius:12px; padding:14px; box-shadow: 0 6px 18px rgba(0,0,0,0.6);
    }
    .panel h2{margin:0 0 8px 0; font-size:15px;}
    .items {display:flex; flex-direction:column; gap:10px; max-height:66vh; overflow:auto; padding-right:6px;}
    .item {
      display:flex; gap:10px; align-items:center; justify-content:space-between;
      background:transparent; border-radius:10px; padding:8px;
    }
    .item .left { display:flex; gap:8px; align-items:center; }
    .badge {
      min-width:44px; height:44px; border-radius:10px; background:rgba(255,255,255,0.02); display:flex;align-items:center;justify-content:center;
      font-weight:700; color:var(--accent); font-size:13px;
    }
    .item-name {font-weight:600;}
    .qty { width:96px; display:flex; gap:6px; align-items:center; }
    .qty input { width:56px; padding:8px; border-radius:8px; border:none; text-align:center; outline:none; font-weight:600; background:rgba(255,255,255,0.02); color:var(--text); }
    .qty button { padding:8px 10px; border-radius:8px; border:none; background:rgba(255,255,255,0.02); color:var(--muted); cursor:pointer; font-weight:600; }

    /* right panel (summary & history) */
    .summary {
      background: linear-gradient(180deg, rgba(255,255,255,0.02), rgba(255,255,255,0.01));
      border-radius:12px; padding:14px; box-shadow: 0 6px 18px rgba(0,0,0,0.6);
      display:flex; flex-direction:column; gap:10px;
    }
    .summary .row { display:flex; justify-content:space-between; align-items:center; padding:8px 6px; }
    .big { font-size:24px; font-weight:800; }
    .small { font-size:13px; color:var(--muted); }

    .actions {display:flex; gap:8px; align-items:center; margin-top:6px;}
    .periods { margin-top:8px; display:flex; flex-direction:column; gap:8px; max-height:36vh; overflow:auto; padding-right:6px; }

    .period-card {
      background: rgba(255,255,255,0.02); padding:10px; border-radius:10px; display:flex; justify-content:space-between; align-items:center;
    }
    .period-meta { display:flex; flex-direction:column;}
    .period-meta .when { font-size:13px; color:var(--muted); }
    .period-meta .total { font-weight:700; font-size:15px; }

    /* footer small */
    .foot { grid-column:1/-1; text-align:center; font-size:12px; color:var(--muted); margin-top:6px; }

    /* theme toggles */
    .theme-toggle { display:flex; align-items:center; gap:8px; padding:6px 8px; border-radius:10px; background:transparent; cursor:pointer; border:1px solid rgba(255,255,255,0.03); }
    .switch { width:42px; height:26px; background:rgba(255,255,255,0.03); border-radius:999px; display:flex; align-items:center; padding:3px; cursor:pointer; }
    .knob { width:18px; height:18px; background:white; border-radius:999px; transform:translateX(0); transition:transform .2s ease; }

    /* light mode toggles via .light class on body */
    body.light {
      background:var(--light-bg);
      color:var(--light-text);
    }
    body.light .card, body.light .panel, body.light .summary, body.light .header { background:var(--light-card); color:var(--light-text); }
    body.light .badge { background:rgba(0,0,0,0.04); color:var(--light-accent); }
    body.light .logo { box-shadow:none; color:white; }
    body.light input, body.light .qty input { background:transparent; color:var(--light-text); border:1px solid rgba(15,23,36,0.06); }
    body.light .knob { background:#111827; }

    /* responsive */
    @media (max-width:980px){
      .wrap { grid-template-columns: 1fr; gap:12px; padding-bottom:60px; }
      .header { flex-direction:column; align-items:stretch; gap:10px; }
    }
  </style>
</head>
<body>
  <div class="wrap">
    <div class="header">
      <div class="title">
        <div class="logo">CS</div>
        <div>
          <h1>Cashier System</h1>
          <div class="subtitle" id="statusSubtitle">متصل — تزامن لحظي</div>
        </div>
      </div>

      <div class="controls">
        <!-- Theme toggle -->
        <div class="theme-toggle btn" id="themeToggle" title="تبديل الثيم">
          <div style="display:flex;align-items:center;gap:8px;">
            <span id="themeLabel">داكن</span>
            <div class="switch" id="switch">
              <div class="knob" id="knob"></div>
            </div>
          </div>
        </div>

        <!-- Save / End period -->
        <button class="btn" id="btnSave">حفظ</button>
        <button class="btn primary" id="btnEnd">إنهاء الفترة</button>
      </div>
    </div>

    <!-- Left: Items -->
    <div class="panel">
      <h2>قائمة الأصناف</h2>
      <div class="items" id="itemsContainer">
        <!-- عناصر تُولّد ديناميكياً -->
      </div>

      <div style="margin-top:10px; display:flex; gap:8px;">
        <input id="newItemName" placeholder="اسم صنف جديد" style="flex:1; padding:10px; border-radius:10px; border:none; background:rgba(255,255,255,0.02); color:inherit; outline:none;">
        <button class="btn" id="addItemBtn">إضافة</button>
      </div>
    </div>

    <!-- Right: Summary and History -->
    <div class="summary">
      <div class="row">
        <div>
          <div class="small">إجمالي العناصر</div>
          <div class="big" id="totalItems">0</div>
        </div>
        <div>
          <div class="small">الإجمالي الكلي</div>
          <div class="big" id="totalAmount">0</div>
        </div>
      </div>

      <div style="display:flex; gap:8px; align-items:center;">
        <input id="passwordInput" type="password" placeholder="كلمة مرور المدير للمسح" style="flex:1; padding:10px; border-radius:10px; border:none; background:rgba(255,255,255,0.02); color:inherit; outline:none;">
        <button class="btn warn" id="btnClear">مسح السجل</button>
      </div>

      <div class="actions">
        <button class="btn" id="btnExport">تصدير JSON</button>
        <button class="btn" id="btnImport">استيراد JSON</button>
        <input id="importFile" type="file" accept=".json" style="display:none">
      </div>

      <h2 style="margin-top:12px;">سجل الفترات</h2>
      <div class="periods" id="periodsContainer">
        <!-- نعرض الفترات هنا -->
      </div>

      <div style="margin-top:8px; display:flex; gap:8px; align-items:center;">
        <div class="small">المستخدم الحالي:</div>
        <div id="currentUser" class="small" style="font-weight:700">ضيف</div>
      </div>
    </div>

    <div class="foot">مبني مع ❤️ — تزامن عبر Firebase Realtime Database</div>
  </div>

  <!-- Firebase SDKs (compat for simpler code) -->
  <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-app-compat.js"></script>
  <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-database-compat.js"></script>
  <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-auth-compat.js"></script>

  <script>
    /***** CONFIG - استخدم الإعدادات التي أرسلتها *****/
    const firebaseConfig = {
      apiKey: "AIzaSyB3k-ETF91TYj-apZynpUOU0D_--aRftSQ",
      authDomain: "cashier-system-18a2f.firebaseapp.com",
      databaseURL: "https://cashier-system-18a2f-default-rtdb.firebaseio.com",
      projectId: "cashier-system-18a2f",
      storageBucket: "cashier-system-18a2f.firebasestorage.app",
      messagingSenderId: "50951955741",
      appId: "1:50951955741:web:abb17d413ac812700c2df4",
      measurementId: "G-Z21M1743KV"
    };
    /***********************************************/

    // init firebase
    firebase.initializeApp(firebaseConfig);
    const db = firebase.database();
    const auth = firebase.auth();

    // Realtime refs
    const PERIODS_REF = db.ref('cashierPeriods');      // array of periods
    const CURRENT_STATE_REF = db.ref('currentState'); // current items & quantities
    const META_REF = db.ref('meta');                  // metadata (last update, user)

    // Local state
    let items = [
      { name: 'مياه', price: 5 },
      { name: 'قهوة', price: 20 },
      { name: 'شاي', price: 12 },
      { name: 'عصير', price: 18 },
      { name: 'شيبسي', price: 10 }
    ];
    let currentState = {}; // { "مياه": 2, "قهوة": 0, ... }
    let pastPeriods = [];  // array of {when, total, items, by}
    let currentUser = null;
    let adminPassword = "1234"; // كلمة مرور افتراضية لمسح السجل — يمكنك تغييرها لاحقًا

    // DOM
    const itemsContainer = document.getElementById('itemsContainer');
    const totalItemsEl = document.getElementById('totalItems');
    const totalAmountEl = document.getElementById('totalAmount');
    const periodsContainer = document.getElementById('periodsContainer');
    const btnEnd = document.getElementById('btnEnd');
    const btnSave = document.getElementById('btnSave');
    const btnClear = document.getElementById('btnClear');
    const passwordInput = document.getElementById('passwordInput');
    const addItemBtn = document.getElementById('addItemBtn');
    const newItemName = document.getElementById('newItemName');
    const btnExport = document.getElementById('btnExport');
    const btnImport = document.getElementById('btnImport');
    const importFile = document.getElementById('importFile');
    const currentUserEl = document.getElementById('currentUser');
    const statusSubtitle = document.getElementById('statusSubtitle');

    // theme
    const themeToggle = document.getElementById('themeToggle');
    const themeLabel = document.getElementById('themeLabel');
    const switchKnob = document.getElementById('knob');

    // helper: sanitize id
    function idFromName(n){ return 'input-' + n.replace(/\s|\/|\(|\)|[^a-zA-Z0-9\u0600-\u06FF]/g,'_'); }

    // initialize currentState
    function ensureState(){
      items.forEach(it=> {
        if (currentState[it.name] === undefined) currentState[it.name] = 0;
      });
    }

    function createItemInputs(){
      itemsContainer.innerHTML = '';
      items.forEach(it=>{
        const id = idFromName(it.name);
        const wrapper = document.createElement('div');
        wrapper.className = 'item';

        wrapper.innerHTML = `
          <div class="left">
            <div class="badge">${it.price}</div>
            <div>
              <div class="item-name">${it.name}</div>
              <div class="small">${it.price} ج.م</div>
            </div>
          </div>
          <div class="qty">
            <button class="dec" data-for="${it.name}">−</button>
            <input id="${id}" class="quantity-input" type="number" min="0" value="${currentState[it.name] || 0}">
            <button class="inc" data-for="${it.name}">+</button>
          </div>
        `;
        itemsContainer.appendChild(wrapper);
      });

      // attach listeners
      document.querySelectorAll('.quantity-input').forEach(inp=>{
        inp.addEventListener('input', e=>{
          const name = inp.id.replace(/^input-/, '').replace(/_/g,' ');
          // map back to name: better to search items for prefix match
          const matched = items.find(it => idFromName(it.name) === inp.id);
          if(!matched) return;
          const value = Math.max(0, Math.floor(Number(inp.value) || 0));
          currentState[matched.name] = value;
          updateSummary();
          publishCurrentStateToFirebase();
        });
      });
      document.querySelectorAll('.inc').forEach(btn=>{
        btn.addEventListener('click', ()=>{
          const name = btn.dataset.for;
          currentState[name] = (currentState[name] || 0) + 1;
          const el = document.getElementById(idFromName(name));
          if(el) el.value = currentState[name];
          updateSummary();
          publishCurrentStateToFirebase();
        });
      });
      document.querySelectorAll('.dec').forEach(btn=>{
        btn.addEventListener('click', ()=>{
          const name = btn.dataset.for;
          currentState[name] = Math.max(0, (currentState[name] || 0) - 1);
          const el = document.getElementById(idFromName(name));
          if(el) el.value = currentState[name];
          updateSummary();
          publishCurrentStateToFirebase();
        });
      });
    }

    function updateSummary(){
      let totalItems = 0;
      let totalAmount = 0;
      items.forEach(it=>{
        const qty = Number(currentState[it.name] || 0);
        totalItems += qty;
        totalAmount += qty * (Number(it.price) || 0);
      });
      totalItemsEl.textContent = totalItems;
      totalAmountEl.textContent = totalAmount.toFixed(2);
    }

    // Export / Import JSON
    btnExport.addEventListener('click', ()=>{
      const data = { items, currentState, pastPeriods };
      const blob = new Blob([JSON.stringify(data, null, 2)], {type:'application/json'});
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url; a.download = 'cashier-backup.json'; document.body.appendChild(a); a.click(); a.remove();
      URL.revokeObjectURL(url);
    });

    btnImport.addEventListener('click', ()=> importFile.click());
    importFile.addEventListener('change', async (e)=>{
      const f = e.target.files[0];
      if(!f) return;
      const txt = await f.text();
      try{
        const data = JSON.parse(txt);
        if (Array.isArray(data.items)) items = data.items;
        currentState = data.currentState || {};
        pastPeriods = data.pastPeriods || [];
        saveData(); // push to firebase & update UI
        renderAll();
        alert('تم استيراد البيانات');
      }catch(err){
        alert('خطأ في ملف الاستيراد');
      }
    });

    // periods UI
    function renderPeriods(){
      periodsContainer.innerHTML = '';
      if(!pastPeriods || !pastPeriods.length){
        periodsContainer.innerHTML = '<div class="small" style="color:var(--muted);">لا توجد فترات بعد</div>';
        return;
      }
      // show latest first
      [...pastPeriods].reverse().forEach((p, idx)=>{
        const el = document.createElement('div');
        el.className = 'period-card';
        el.innerHTML = `
          <div class="period-meta">
            <div class="period-title">فترة: ${new Date(p.when).toLocaleString('ar-EG')}</div>
            <div class="when small">بواسطة: ${p.by || 'ضيف'}</div>
          </div>
          <div style="text-align:right">
            <div class="total">${p.total} ج.م</div>
            <div class="small">${Object.values(p.items || {}).reduce((a,b)=>a+(b||0),0)} عنصر</div>
          </div>
        `;
        periodsContainer.appendChild(el);
      });
    }

    // end period
    btnEnd.addEventListener('click', ()=>{
      const total = Number(totalAmountEl.textContent || 0);
      const when = Date.now();
      const by = currentUser ? (currentUser.displayName || currentUser.uid) : (auth.currentUser ? auth.currentUser.uid : 'guest');
      const snapshot = {
        when, total, by, items: {...currentState}
      };
      pastPeriods.push(snapshot);
      // reset state
      Object.keys(currentState).forEach(k=> currentState[k]=0);
      createItemInputs();
      updateSummary();
      saveData();
      alert('تم إنهاء الفترة وحفظها.');
      publishCurrentStateToFirebase(); // publish reset
    });

    // save to firebase (periods)
    function saveData(){
      // write entire list (for modest data); can be optimized later
      PERIODS_REF.set(pastPeriods)
        .then(()=> console.log('Periods saved'))
        .catch(e=> console.warn('save periods err', e));
    }

    // clear logs with password
    btnClear.addEventListener('click', ()=>{
      const pw = passwordInput.value || '';
      if (pw !== adminPassword){
        alert('كلمة المرور غير صحيحة');
        return;
      }
      if (!confirm('هل متأكد أنك تريد مسح كل الفترات؟ هذه العملية لا يمكن التراجع عنها.')) return;
      pastPeriods = [];
      saveData();
      renderPeriods();
      alert('تم مسح السجل.');
    });

    // add item
    addItemBtn.addEventListener('click', ()=>{
      const name = (newItemName.value || '').trim();
      if(!name) return alert('ادخل اسم صنف');
      // default price = 0 (يمكن التعديل لاحقًا)
      items.push({name, price:0});
      currentState[name] = 0;
      newItemName.value = '';
      createItemInputs();
      publishCurrentStateToFirebase();
    });

    // publish current state to firebase for realtime sync
    function publishCurrentStateToFirebase(){
      const payload = {
        items: {...currentState},
        lastUpdatedAt: Date.now(),
        lastUpdatedBy: auth.currentUser ? auth.currentUser.uid : 'guest'
      };
      META_REF.set({ lastUpdatedAt: payload.lastUpdatedAt, lastUpdatedBy: payload.lastUpdatedBy }).catch(()=>{});
      CURRENT_STATE_REF.set(payload).catch(e=> console.warn('publish state err', e));
    }

    // load data from firebase & set realtime listeners
    function loadData(){
      // periods listener
      PERIODS_REF.on('value', snap=>{
        const val = snap.val();
        if (!val) { pastPeriods = []; renderPeriods(); return; }
        // if it's an array or object
        pastPeriods = Array.isArray(val) ? val : Object.values(val);
        renderPeriods();
      });

      // current state listener
      CURRENT_STATE_REF.on('value', snap=>{
        const val = snap.val();
        if (!val || !val.items) return;
        // apply incoming state if newer
        // simple approach: accept all incoming states (last-writer-wins by time)
        const incomingTs = val.lastUpdatedAt || 0;
        const localTs = window.__lastStateTimestamp || 0;
        if (incomingTs < localTs) return; // local is newer; ignore
        window.__lastStateTimestamp = incomingTs;
        const incomingItems = val.items || {};
        // merge: if item exists in UI, set value; otherwise create item entry
        Object.keys(incomingItems).forEach(name=>{
          if (!items.find(it=>it.name === name)) {
            items.push({name, price:0});
          }
          currentState[name] = incomingItems[name];
        });
        // ensure all items present
        ensureState();
        createItemInputs();
        updateSummary();
      });

      // meta listener for status
      META_REF.on('value', snap=>{
        const m = snap.val();
        if (m && m.lastUpdatedAt){
          const who = m.lastUpdatedBy || 'guest';
          statusSubtitle.textContent = `آخر تحديث: ${new Date(m.lastUpdatedAt).toLocaleTimeString('ar-EG')} بواسطة ${who}`;
        } else {
          statusSubtitle.textContent = 'متصل — تزامن لحظي';
        }
      });
    }

    // Authentication (anonymous)
    auth.signInAnonymously()
      .then(()=> {
        currentUser = auth.currentUser;
        currentUserEl.textContent = currentUser && currentUser.uid ? currentUser.uid.substring(0,8) : 'ضيف';
        console.log('signed in anon', currentUser && currentUser.uid);
      })
      .catch(err=>{
        console.warn('auth err', err);
        currentUserEl.textContent = 'غير مسجل';
      });

    // Save button saves periods explicitly
    btnSave.addEventListener('click', ()=>{
      saveData();
      alert('تم حفظ البيانات إلى السحابة');
    });

    // initial render
    function renderAll(){
      ensureState();
      createItemInputs();
      updateSummary();
      renderPeriods();
    }

    // load firebase data after DOM ready
    document.addEventListener('DOMContentLoaded', ()=>{
      renderAll();
      loadData();
    });

    /******** Theme handling (Dark / Light) ********/
    function setLight(isLight){
      if(isLight){
        document.body.classList.add('light');
        themeLabel.textContent = 'فاتح';
        switchKnob.style.transform = 'translateX(16px)';
      } else {
        document.body.classList.remove('light');
        themeLabel.textContent = 'داكن';
        switchKnob.style.transform = 'translateX(0px)';
      }
      localStorage.setItem('themeLight', isLight ? '1' : '0');
    }

    // init theme from storage or prefer dark
    (function(){
      const saved = localStorage.getItem('themeLight');
      const isLight = saved === '1';
      setLight(isLight);
    })();

    themeToggle.addEventListener('click', ()=>{
      const isLight = document.body.classList.contains('light');
      setLight(!isLight);
    });

    /******** Utility: keyboard shortcuts (optional) ********/
    document.addEventListener('keydown', (e)=>{
      if(e.key === 's' && (e.ctrlKey || e.metaKey)){
        e.preventDefault();
        saveData();
      }
    });

    // small: auto-save current state every 20s
    setInterval(()=> {
      publishCurrentStateToFirebase();
    }, 20000);

    // expose a function to change admin password via console if needed
    window.setAdminPassword = function(pw){ adminPassword = pw; console.log('admin pw changed'); };

  </script>
</body>
</html>
